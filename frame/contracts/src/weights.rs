// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-02-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(1_521_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_257_000 as Weight)
			// Standard Error: 0
			.saturating_add((759_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(1_312_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_271_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(10_854_000 as Weight)
			// Standard Error: 0
			.saturating_add((64_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(217_284_000 as Weight)
			// Standard Error: 0
			.saturating_add((55_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(259_829_000 as Weight)
			// Standard Error: 0
			.saturating_add((141_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(171_558_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(140_458_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(53_202_000 as Weight)
			// Standard Error: 0
			.saturating_add((64_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(25_053_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(214_559_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((50_233_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_is_contract(r: u32, ) -> Weight {
		(131_682_000 as Weight)
			// Standard Error: 677_000
			.saturating_add((366_831_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(214_069_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((21_402_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(220_892_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((49_308_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(216_873_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((49_581_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(222_467_000 as Weight)
			// Standard Error: 142_000
			.saturating_add((140_192_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(218_067_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((49_106_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(218_473_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((49_014_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(218_173_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((48_857_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(219_788_000 as Weight)
			// Standard Error: 100_000
			.saturating_add((48_771_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(217_636_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((123_096_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(128_225_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((24_361_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(216_707_000 as Weight)
			// Standard Error: 99_000
			.saturating_add((48_683_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(301_470_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((11_851_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(211_992_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((1_814_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(215_325_000 as Weight)
			// Standard Error: 0
			.saturating_add((199_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(215_341_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((53_068_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(220_616_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((159_921_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(219_792_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((291_977_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(519_658_000 as Weight)
			// Standard Error: 1_518_000
			.saturating_add((296_170_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 299_000
			.saturating_add((83_461_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(134_022_000 as Weight)
			// Standard Error: 58_000
			.saturating_add((40_055_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(51_961_000 as Weight)
			// Standard Error: 1_031_000
			.saturating_add((408_544_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(611_933_000 as Weight)
			// Standard Error: 259_000
			.saturating_add((28_063_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(627_848_000 as Weight)
			// Standard Error: 319_000
			.saturating_add((11_251_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(92_022_000 as Weight)
			// Standard Error: 897_000
			.saturating_add((386_973_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(608_160_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((10_636_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(105_085_000 as Weight)
			// Standard Error: 686_000
			.saturating_add((328_339_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(567_121_000 as Weight)
			// Standard Error: 384_000
			.saturating_add((63_673_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(104 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(123_206_000 as Weight)
			// Standard Error: 670_000
			.saturating_add((294_226_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(515_760_000 as Weight)
			// Standard Error: 248_000
			.saturating_add((10_605_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(104 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(100_037_000 as Weight)
			// Standard Error: 855_000
			.saturating_add((428_242_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(670_969_000 as Weight)
			// Standard Error: 367_000
			.saturating_add((65_438_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(120_692_000 as Weight)
			// Standard Error: 1_120_000
			.saturating_add((1_771_117_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_066_000
			.saturating_add((19_764_786_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_939_000
			.saturating_add((19_645_654_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((99 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(10_900_544_000 as Weight)
			// Standard Error: 18_411_000
			.saturating_add((1_679_108_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 8_000
			.saturating_add((11_977_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:100 w:100)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 46_881_000
			.saturating_add((27_459_120_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((400 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((400 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:101 w:101)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(14_561_740_000 as Weight)
			// Standard Error: 42_704_000
			.saturating_add((919_128_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 20_000
			.saturating_add((155_691_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(207 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(205 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(215_972_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((80_235_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(391_008_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((465_591_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(215_166_000 as Weight)
			// Standard Error: 129_000
			.saturating_add((91_239_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(280_889_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((306_424_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(217_034_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((63_933_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(359_895_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((119_531_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(216_011_000 as Weight)
			// Standard Error: 113_000
			.saturating_add((63_202_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(335_217_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((119_720_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(212_310_000 as Weight)
			// Standard Error: 1_240_000
			.saturating_add((15_406_204_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:36 w:36)
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_166_000
			.saturating_add((930_468_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((99 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((99 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(73_908_000 as Weight)
			// Standard Error: 0
			.saturating_add((606_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(74_064_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_314_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(74_417_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_409_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(73_971_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_782_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(73_751_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_891_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(73_856_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((902_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(73_480_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_450_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(73_371_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_585_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(76_201_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(71_936_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((17_435_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(85_883_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((27_789_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(119_273_000 as Weight)
			// Standard Error: 0
			.saturating_add((909_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(74_726_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((615_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(74_367_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((691_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(74_324_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((902_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(76_894_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_179_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(76_975_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_366_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(74_475_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((657_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(73_516_000 as Weight)
			// Standard Error: 159_000
			.saturating_add((180_998_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(74_047_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((904_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(74_054_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((903_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(73_802_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((919_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(74_739_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((910_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(74_172_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(74_194_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((883_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(74_157_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((894_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(74_103_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(74_027_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(74_030_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(73_852_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(74_072_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(74_163_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_365_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(74_057_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_361_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(73_793_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_375_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(74_109_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(74_041_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(73_940_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(74_055_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(74_008_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_340_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(74_285_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_998_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(73_875_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_030_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(74_108_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_003_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(73_864_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_050_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(74_009_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_341_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(73_855_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(74_108_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_336_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(74_092_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_354_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(74_111_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(74_025_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(74_239_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_353_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(74_003_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_361_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(1_521_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_257_000 as Weight)
			// Standard Error: 0
			.saturating_add((759_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(1_312_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_271_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(10_854_000 as Weight)
			// Standard Error: 0
			.saturating_add((64_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(217_284_000 as Weight)
			// Standard Error: 0
			.saturating_add((55_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(259_829_000 as Weight)
			// Standard Error: 0
			.saturating_add((141_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(171_558_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(140_458_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(53_202_000 as Weight)
			// Standard Error: 0
			.saturating_add((64_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(25_053_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(214_559_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((50_233_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_is_contract(r: u32, ) -> Weight {
		(131_682_000 as Weight)
			// Standard Error: 677_000
			.saturating_add((366_831_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(214_069_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((21_402_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(220_892_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((49_308_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(216_873_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((49_581_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(222_467_000 as Weight)
			// Standard Error: 142_000
			.saturating_add((140_192_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(218_067_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((49_106_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(218_473_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((49_014_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(218_173_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((48_857_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(219_788_000 as Weight)
			// Standard Error: 100_000
			.saturating_add((48_771_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(217_636_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((123_096_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(128_225_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((24_361_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(216_707_000 as Weight)
			// Standard Error: 99_000
			.saturating_add((48_683_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(301_470_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((11_851_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(211_992_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((1_814_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(215_325_000 as Weight)
			// Standard Error: 0
			.saturating_add((199_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(215_341_000 as Weight)
			// Standard Error: 153_000
			.saturating_add((53_068_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(220_616_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((159_921_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(219_792_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((291_977_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(519_658_000 as Weight)
			// Standard Error: 1_518_000
			.saturating_add((296_170_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 299_000
			.saturating_add((83_461_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(134_022_000 as Weight)
			// Standard Error: 58_000
			.saturating_add((40_055_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(51_961_000 as Weight)
			// Standard Error: 1_031_000
			.saturating_add((408_544_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(611_933_000 as Weight)
			// Standard Error: 259_000
			.saturating_add((28_063_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(627_848_000 as Weight)
			// Standard Error: 319_000
			.saturating_add((11_251_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(92_022_000 as Weight)
			// Standard Error: 897_000
			.saturating_add((386_973_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(608_160_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((10_636_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(105_085_000 as Weight)
			// Standard Error: 686_000
			.saturating_add((328_339_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(567_121_000 as Weight)
			// Standard Error: 384_000
			.saturating_add((63_673_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(104 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(123_206_000 as Weight)
			// Standard Error: 670_000
			.saturating_add((294_226_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(515_760_000 as Weight)
			// Standard Error: 248_000
			.saturating_add((10_605_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(104 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(100_037_000 as Weight)
			// Standard Error: 855_000
			.saturating_add((428_242_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(670_969_000 as Weight)
			// Standard Error: 367_000
			.saturating_add((65_438_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(120_692_000 as Weight)
			// Standard Error: 1_120_000
			.saturating_add((1_771_117_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_066_000
			.saturating_add((19_764_786_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_939_000
			.saturating_add((19_645_654_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((99 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(10_900_544_000 as Weight)
			// Standard Error: 18_411_000
			.saturating_add((1_679_108_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 8_000
			.saturating_add((11_977_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:100 w:100)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 46_881_000
			.saturating_add((27_459_120_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((400 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((400 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:101 w:101)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(14_561_740_000 as Weight)
			// Standard Error: 42_704_000
			.saturating_add((919_128_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 20_000
			.saturating_add((155_691_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(207 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(215_972_000 as Weight)
			// Standard Error: 130_000
			.saturating_add((80_235_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(391_008_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((465_591_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(215_166_000 as Weight)
			// Standard Error: 129_000
			.saturating_add((91_239_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(280_889_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((306_424_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(217_034_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((63_933_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(359_895_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((119_531_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(216_011_000 as Weight)
			// Standard Error: 113_000
			.saturating_add((63_202_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(335_217_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((119_720_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(212_310_000 as Weight)
			// Standard Error: 1_240_000
			.saturating_add((15_406_204_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:36 w:36)
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_166_000
			.saturating_add((930_468_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((99 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((99 as Weight).saturating_mul(r as Weight)))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(73_908_000 as Weight)
			// Standard Error: 0
			.saturating_add((606_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(74_064_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_314_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(74_417_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_409_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(73_971_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_782_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(73_751_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_891_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(73_856_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((902_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(73_480_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_450_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(73_371_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_585_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(76_201_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(71_936_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((17_435_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(85_883_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((27_789_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(119_273_000 as Weight)
			// Standard Error: 0
			.saturating_add((909_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(74_726_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((615_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(74_367_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((691_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(74_324_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((902_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(76_894_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_179_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(76_975_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_366_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(74_475_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((657_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(73_516_000 as Weight)
			// Standard Error: 159_000
			.saturating_add((180_998_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(74_047_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((904_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(74_054_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((903_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(73_802_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((919_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(74_739_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((910_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(74_172_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(74_194_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((883_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(74_157_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((894_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(74_103_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(74_027_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(74_030_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(73_852_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(74_072_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(74_163_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_365_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(74_057_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_361_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(73_793_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_375_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(74_109_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(74_041_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(73_940_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(74_055_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(74_008_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_340_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(74_285_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_998_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(73_875_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_030_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(74_108_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_003_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(73_864_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_050_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(74_009_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_341_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(73_855_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(74_108_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_336_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(74_092_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_354_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(74_111_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(74_025_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(74_239_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_353_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(74_003_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_361_000 as Weight).saturating_mul(r as Weight))
	}
}
